@page "/profile"
@using TakeAQuiz.Shared.ViewModels;
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudGrid Class="d-flex justify-center pa-10">
    <MudItem xs="8">
        <MudPaper Elevation="4" Class="pa-6 ma-4">
            @if (userInfo != null)
            {
                <MudText Typo="Typo.h4">@userInfo.UserName</MudText>
            }
            else
            {
                <p>User information is not available.</p>
            }
        </MudPaper>
    </MudItem>

    <MudItem xs="8">
        <MudPaper Elevation="4" Class="pa-6 ma-4">
            <MudText Typo="Typo.h5">Your created Quizzes</MudText>
            <MudTabs Outlined="true" Position="Position.Top" Rounded="true" Border="true"
                     ApplyEffectsToContainer="true" Class="mt-8" PanelClass="pa-6">
                @if (userInfo != null && userInfo.Quizzes != null && userInfo.Quizzes.Any())
                {
                    @for (int i = 0; i < userInfo.Quizzes.Count(); i++)
                    {
                        var localIndex = i;

                        <MudTabPanel Text="@userInfo.Quizzes[localIndex].Title">
                            <div style="display: flex; justify-content: space-between;">
                                <MudText Typo="Typo.h6">@userInfo.Quizzes[localIndex].Title</MudText>
                                <MudRating ReadOnly="true" SelectedValue="userInfo.Quizzes[localIndex].OverallRating ?? 0" />
                            </div>
                            <MudText Typo="Typo.body1">Total games played: @userInfo.Quizzes[localIndex].GamesPlayed</MudText>
                            <MudText Class="mt-8 mb-4" Typo="Typo.h6">Player Stats:</MudText>

                            @if (gameInfo != null)
                            {
                                var quizGames = gameInfo.Where(g => g.QuizId == userInfo.Quizzes[localIndex].Id).ToList();

                                <MudTable Items="quizGames" Hover="true" Breakpoint="Breakpoint.Sm">
                                    <HeaderContent>
                                        <MudTh>Name</MudTh>
                                        <MudTh>Score</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Name">@context.Name</MudTd>
                                        <MudTd DataLabel="Score">@context.Score</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            }
                            else
                            {
                                <MudText Typo="Typo.body1">No game information available.</MudText>
                            }
                        </MudTabPanel>
                    }
                }
                else
                {
                    <MudText Typo="Typo.h6">User information is not available or there are no quizzes.<br>Are you logged in?</MudText>
                    <MudButton Class="mt-2 pa-2" Variant="Variant.Filled" Color="Color.Primary" Href="authentication/login">Log in</MudButton>
                }
            </MudTabs>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private UserViewModel? userInfo;
    private List<GameViewModel>? gameInfo;
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.Identity;

        if (user != null && user.IsAuthenticated)
        {
            userInfo = await Http.GetFromJsonAsync<UserViewModel>("api/profile/getuserdata");
            gameInfo = await Http.GetFromJsonAsync<List<GameViewModel>>("api/profile/getquizplayerhistory");
        }
    }
}
