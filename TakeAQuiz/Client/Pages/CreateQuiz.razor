@page "/create-quiz"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using TakeAQuiz.Shared.ViewModels;
@inject HttpClient _http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="ma-5 d-flex justify-center">
	<h1>Create a Quiz!</h1>
</div>
<AuthorizeView>
	<Authorized>
<MudGrid Class="d-flex justify-center pa-3 ma-3">
	<MudItem xs="12" sm="7" Class="pa-3">
		<MudForm @ref="form" @bind-IsValid="@success">
			<MudPaper Elevation="6" Class="pa-4">
				<MudTextField T="string" Label="Title" @bind-Value=@quiz.Title Required="true" RequiredError="You need a Title on your Quiz!" />
			</MudPaper>

			@for (int i = 0; i < questionSets.Count; i++)
			{
				var currentIndex = i;
				var currentQuestion = questionSets[i];
				<div class="border-2 mud-border-primary pa-4 ma-4">
					<div class="d-flex justify-space-between align-center">
						<h1>Question @(i + 1)</h1>
						@if (currentIndex > 0)
						{
							<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteQuestion(currentIndex)"></MudButton>
						}
					</div>

					<MudTextField T="string" Label="Question" Required="true" @bind-Value="currentQuestion.Question" RequiredError="A question is required" />
					<MudTextField T="string" Label="Answer" Required="true" @bind-Value="currentQuestion.Answer" RequiredError="What is the answer?" />

					@if (errors.Count > 0)
					{
						<h2>Errors</h2>
						<ul class="text-danger">
							@foreach (var error in errors)
							{
								<li>@error</li>
							}
						</ul>
					}

					<InputFile type="file" enctype='multipart/form-data' OnChange="(e) => LoadFileAsync(e, currentIndex)" accept=".png,.jpg,.jpeg,.mp4,.mov,.webm" />

					@if (currentQuestion.MultiAnswer)
					{
						@foreach (var mockAnswer in currentQuestion.MockAnswers)
						{
							<MudTextField Tag="i" T="string" Label="Add a mock answer" @bind-Value="mockAnswer.MockAnswer" Required="true" RequiredError="You need 3 mock answers" />
						}
						<MudButton Tag="i" Class="mt-2 mr-2 pa-2" Variant="Variant.Filled" Color="Color.Primary" @onclick="() => RemoveMockAnswers(currentIndex)">Remove Mock Answers</MudButton>
					}
					else
					{
						<MudButton Class="mt-2 mr-2 pa-2" Variant="Variant.Filled" Color="Color.Primary" @onclick="() => AddMockAnswer(currentIndex)">Add Mock Answers</MudButton>
					}
					@if (currentQuestion.HasTimeLimit)
					{
						<MudRadioGroup Class="mt-2" @bind-SelectedOption=@currentQuestion.TimeLimit>
							<MudRadio Option="15" Color="Color.Primary">15s</MudRadio>
							<MudRadio Option="30" Color="Color.Primary">30s</MudRadio>
							<MudRadio Option="45" Color="Color.Primary">45s</MudRadio>
						</MudRadioGroup>
						<MudButton Class="mt-2 pa-2" Variant="Variant.Filled" Color="Color.Primary" @onclick="() =>RemoveTimeLimit(currentIndex)">Remove Time Limit</MudButton>
					}
					else
					{
						<MudButton Class="mt-2 pa-2" Variant="Variant.Filled" Color="Color.Primary" @onclick="() =>AddTimeLimit(currentIndex)">Add Time Limit</MudButton>
					}
				</div>
			}
		</MudForm>
		<MudPaper Elevation="6" Class="pa-2 mt-2 d-flex justify-space-between">
			<MudButton Class="ma-2 pa-2" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" @onclick="@CreateQuizAsync">Create Quiz</MudButton>
			<MudButton Class="ma-2 pa-2" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" @onclick="NewQuestion">New Question</MudButton>
		</MudPaper>
	</MudItem>
</MudGrid>
	</Authorized>
	<NotAuthorized>
		<MudGrid Class="pa-10 d-flex justify-center">
			<MudItem xs="8">
				<MudPaper Elevation="4" Class="d-flex flex-column justify-center align-center pa-8 ma-4">
					<MudText Typo="Typo.h4">You need to log in to creat a Quiz!:)</MudText>
					<div style="margin: 2rem">
						<MudButton Class="mt-2 pa-2" Variant="Variant.Filled" Color="Color.Primary" Href="authentication/login">Log in</MudButton>
					</div>
				</MudPaper>
			</MudItem>
		</MudGrid>
	</NotAuthorized>
</AuthorizeView>

@code {
	bool success;
	MudForm form = new MudForm();
	//List of questions to the quiz
	QuestionViewModel currentQuestion;
	List<QuestionViewModel> questionSets = new List<QuestionViewModel>();
	QuizViewModel quiz = new QuizViewModel();

	//Creates divs for new questions and adds them to the list
	public void NewQuestion()
	{
		// Reset the currentQuestion for the next question
		currentQuestion = new QuestionViewModel();
		questionSets.Add(currentQuestion);
	}

	private void AddMockAnswer(int i)
	{
		//Gets the question with the index value sen in from the form
		var question = questionSets[i];
		question.MultiAnswer = true;
		while (question.MockAnswers.Count < 3)
		{
			question.MockAnswers.Add(new MockViewModel());
		}
	}

	private void AddTimeLimit(int i)
	{
		var question = questionSets[i];
		question.HasTimeLimit = true;
	}

	private async Task RemoveMockAnswers(int i)
	{
		var question = questionSets[i];
		question.MockAnswers.Clear();
		question.MultiAnswer = false;
		//Delay Magic!
		await Task.Delay(1);
	}

	private void RemoveTimeLimit(int i)
	{
		var question = questionSets[i];
		question.HasTimeLimit = false;
		question.TimeLimit = 0;
	}

	private void DeleteQuestion(int i)
	{
		questionSets.RemoveAt(i);

	}

	//Check if form is valid, then sends in data to controller
	private async Task CreateQuizAsync()
	{
		try
		{
			quiz.Questions = questionSets;
			await form.Validate();

			if (form.IsValid && quiz.Questions.Count > 0)
			{ 

					var response = await _http.PostAsJsonAsync("api/quiz/createquiz", quiz);
					var response2 = await _http.PostAsJsonAsync("api/quiz/transferfiles", files);

				if (response.IsSuccessStatusCode && response2.IsSuccessStatusCode)
				{
					NavigationManager.NavigateTo($"/quiz-created/{quiz.Title}");
				}
			}
		}
		catch (Exception ex)
		{
			errors.Add($"Error: {ex.Message}");
		}
	}

	// File logic
	private long maxFileSize = 1024 * 1024 * 3; // 3MB
	private List<string> errors = new();
	private IBrowserFile? file;
	private List<FileUploadViewModel> files = new List<FileUploadViewModel>();

	private async Task LoadFileAsync(InputFileChangeEventArgs e, int currentIndex)
	{
		file = e.File;

		if (file != null)
		{
			if (file.Size > maxFileSize)
			{
				errors.Add($"Error: File size exceeds the limit of {maxFileSize / (1024 * 1024)} MB");
				return;
			}

			var uniqueFileName = Guid.NewGuid().ToString() + Path.GetExtension(file.Name);

			var fileView = new FileUploadViewModel
				{
					NewFileName = uniqueFileName,
					FileBytes = await ConvertFileToByteArray(file,maxFileSize)
				};

			try
			{
				if (currentIndex >= 0 && currentIndex < files.Count)
				{
					currentQuestion.Media = files[currentIndex].NewFileName;
				}
				else
				{
					files.Add(fileView);
					currentQuestion.Media = uniqueFileName;
				}
			}
			catch (Exception ex)
			{
				errors.Add($"Error: {ex.Message}");
			}
		}
	}

	private async Task<byte[]> ConvertFileToByteArray(IBrowserFile file, long maxSize)
	{

		using (var ms = new MemoryStream())
		{
			await file.OpenReadStream(maxSize).CopyToAsync(ms);
			return ms.ToArray();
		}
	}
}