@page "/view-quizzes"
@using TakeAQuiz.Shared.ViewModels;
@inject HttpClient Http;
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <Authorized>
<MudGrid Class="pa-10">
    <MudItem xs="12">
        <MudPaper Elevation="4" Class="pa-8 ma-4 d-flex justify-content-between align-center">
            <MudText Typo="Typo.h4">All Quizzes</MudText>
            <MudAutocomplete Style="width: 350px; margin: 0 auto;" Label="Search Quiz" @bind-Value="value" SearchFunc="@Search"
                             ResetValueOnEmptyText="@resetValueOnEmptyText"
                             CoerceText="@coerceText" CoerceValue="@coerceValue"
                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
            <MudButton Class="py-2 px-4 rounded ma-0" @onclick="@ResetSearch" Style="background-color: rgba(89,74,226,1); color: rgba(255,255,255,1);">Reset Search</MudButton>
        </MudPaper>
    </MudItem>
    
    @if (string.IsNullOrEmpty(value))
    {
        @foreach (var quiz in quizzes)
        {
            <MudItem xs="3">
                <MudLink Underline="Underline.None" Href="@($"/play-quiz/{quiz.Title}")">
                    <MudPaper Elevation="4" Class="pa-8 ma-4">
                        <MudText Typo="Typo.h5">@quiz.Title</MudText>
                        <MudText Typo="Typo.h6">Games played: @quiz.GamesPlayed</MudText>
                        <MudRating  ReadOnly="true" SelectedValue="quiz.OverallRating ?? 0" />
                    </MudPaper>
                </MudLink>
            </MudItem>
        }
    }
    else
    {
        var selectedQuiz = quizzes.FirstOrDefault(q => q.Title.Equals(value, StringComparison.InvariantCultureIgnoreCase));

        @if (selectedQuiz != null)
        {
            <MudItem xs="3">
                <MudLink Underline="Underline.None" Href="@($"/play-quiz/{selectedQuiz.Title}")">
                    <MudPaper Elevation="4" Class="pa-8 ma-4">
                        <MudText Typo="Typo.h5">@selectedQuiz.Title</MudText>
                        <MudText Typo="Typo.h6">Games played: @selectedQuiz.GamesPlayed</MudText>
                        <MudText Typo="Typo.h6">@selectedQuiz.OverallRating</MudText>
                    </MudPaper>
                </MudLink>
            </MudItem>
        }
        else
        {
            <MudItem xs="3">
                <MudText Typo="Typo.h6">Quiz not found.</MudText>
            </MudItem>
        }
    }
</MudGrid>
    </Authorized>
    <NotAuthorized>
        <MudGrid Class="pa-10 d-flex justify-center">
            <MudItem xs="8">
                <MudPaper Elevation="4" Class="d-flex flex-column justify-center align-center pa-8 ma-4">
                    <MudText Typo="Typo.h4">You need to log in to view the Quizzes!:)</MudText>
                    <div style="margin: 2rem">
                        <MudButton Class="mt-2 pa-2" Variant="Variant.Filled" Color="Color.Primary" Href="authentication/login">Log in</MudButton>
                    </div>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </NotAuthorized>
</AuthorizeView>
@code {
    // API
    private List<QuizViewModel> quizzes = new List<QuizViewModel>();

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.Identity;

        if (user != null && user.IsAuthenticated)
        {
        quizzes = await Http.GetFromJsonAsync<List<QuizViewModel>>("api/quiz/getallquizzes");
        }
    }

    // Search
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string? value;

    private async Task<IEnumerable<string>> Search(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return new string[0];
        }

        return quizzes.Where(x => x.Title
            .Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(x => x.Title);
    }

    private async Task ResetSearch()
    {
        this.value = string.Empty;
    }
}