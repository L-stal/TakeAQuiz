@page "/play-quiz/{title}"
@using TakeAQuiz.Shared.ViewModels;
@using TakeAQuiz.Shared.GameLogic;
@inject HttpClient Http;

<MudGrid Class="pa-10">
    <MudItem xs="12">
        <MudPaper Elevation="4" Class="pa-8 ma-4">
            <MudContainer Class="d-flex justify-space-between ma-0 pa-0">
                <MudText Typo="Typo.h4">@Title</MudText>
                <MudButton Class="py-2 px-4 rounded ma-0" Href="/view-quizzes" Style="background-color: rgba(89,74,226,1); color: rgba(255,255,255,1);">Go Back</MudButton>
            </MudContainer>
            <MudText Typo="Typo.h6">Rating: @quizInfo.OverallRating / 5</MudText>
        </MudPaper>
    </MudItem>

    <MudItem xs="12">
        <MudPaper Elevation="4" Class="pa-8 ma-4">
            @if (!game.ActiveGame)
            {
                <MudContainer Class="d-flex justify-center">
                    <MudButton OnClick="@game.StartGame" Variant="Variant.Outlined" Color="Color.Primary" Class="mr-4 pa-6" Style="width: 49%; font-size: 1.2rem;">Play</MudButton>
                </MudContainer>
            } 
            else
            {
                //Ställ frågan -------------------Design
                    <h1>@quizInfo.Questions[game.QIndex].Question @game.QIndex</h1>
                <MudContainer Class="d-flex justify-center">
                    @if (quizInfo.Questions[game.QIndex].Media.Contains("youtube"))
                    {
                      @*   <video controls>
                            <source src="@quizInfo.Questions[game.QIndex].Media" type="video/mp4">
                            Your browser does not support the video tag.
                        </video> *@
                        <iframe width="1227" height="690" src="@quizInfo.Questions[game.QIndex].Media" title="Finnish Dating Ad" frameborder="0"
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
                    }
                    else
                    {
                        <MudImage Height="600" ObjectFit="ObjectFit.Cover" ObjectPosition="ObjectPosition.Center" Src="@quizInfo.Questions[game.QIndex].Media" Alt="Media" />
                    }
                </MudContainer>

                if (quizInfo.Questions[game.QIndex].MockAnswers != null && quizInfo.Questions[game.QIndex].MockAnswers.Any())
                {
                    <MudContainer Class="d-flex flex-column ma-0 pa-0">
                        <MudContainer Class="mb-6 ma-0 pa-0 d-flex justify-space-between">
                            <MudButton @onclick="() => SendGuess(
                                                quizInfo.Questions[game.QIndex].MockAnswers[0].MockAnswer,
                                                quizInfo.Questions[game.QIndex].Answer)"
                                       Variant="Variant.Outlined"
                                       Color="Color.Primary"
                                       Class="mr-4 pa-6"
                                       Style="width: 49%; font-size: 1.2rem;">
                                @quizInfo.Questions[game.QIndex].MockAnswers[0].MockAnswer
                            </MudButton>

                            <MudButton @onclick="() =>SendGuess(
                                                quizInfo.Questions[game.QIndex].MockAnswers[1].MockAnswer,
                                                quizInfo.Questions[game.QIndex].Answer)"
                                       Variant="Variant.Outlined"
                                       Color="Color.Primary"
                                       Class="pa-6"
                                       Style="width: 49%; font-size: 1.2rem;">
                                @quizInfo.Questions[game.QIndex].MockAnswers[1].MockAnswer
                            </MudButton>
                        </MudContainer>
                        <MudContainer Class="ma-0 pa-0 d-flex justify-space-between">
                            <MudButton @onclick="() => SendGuess(
                                                quizInfo.Questions[game.QIndex].MockAnswers[2].MockAnswer,
                                                quizInfo.Questions[game.QIndex].Answer)"
                                       Variant="Variant.Outlined"
                                       Color="Color.Primary"
                                       Class="mr-4 pa-6"
                                       Style="width: 49%; font-size: 1.2rem;">
                                @quizInfo.Questions[game.QIndex].MockAnswers[2].MockAnswer
                            </MudButton>


                            <MudButton @onclick="() => SendGuess(
                                                quizInfo.Questions[game.QIndex].Answer,
                                                quizInfo.Questions[game.QIndex].Answer)"
                                       Variant="Variant.Outlined"
                                       Color="Color.Primary"
                                       Class="pa-6"
                                       Style="width: 49%; font-size: 1.2rem;">
                                @quizInfo.Questions[game.QIndex].Answer
                            </MudButton>
                        </MudContainer>
                    </MudContainer>

                }
                else
                {
                    <MudContainer Class="d-flex justify-center" Style="width: 49%;">
                        <MudTextField @bind-Value="Guess" T="string" Label="Answer" Variant="Variant.Outlined" Class="mr-4 pa-6" Style="font-size: 1.2rem;"></MudTextField>
                        <MudButton @onclick="() => SendGuess(Guess , quizInfo.Questions[game.QIndex].Answer)">Guess</MudButton>
                    </MudContainer>
  
                }
            }
        </MudPaper>
    </MudItem>
</MudGrid>
 
@code {
    // Parameter
    [Parameter]
    public string? Title { get; set; }
    // Quiz
    private GameLogic game = new GameLogic();
    private QuizViewModel? quizInfo = new QuizViewModel();
    public string? Guess { get; set; }


    public async Task SendGuess(string guess, string answer)
    {
        await game.MakeGuess(guess,answer);
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        quizInfo = await Http.GetFromJsonAsync<QuizViewModel>("api/quiz/getquiz/" + @Title);
        game.CurrentScore += quizInfo.MaxScore;

        // game.StateChange += () => InvokeAsync(StateHasChanged);
    }
}